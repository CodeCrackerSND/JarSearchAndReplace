/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package maingui;

import ClassReaderWriter.AttributeCode;
import ClassReaderWriter.ClassReader;
import ClassReaderWriter.utils;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileWriter;
import java.io.InputStream;
import java.util.Enumeration;
import java.util.List;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;
import javax.swing.JFileChooser;

/**
 *
 * @author Mihai
 */
public class DissasembleFrame extends javax.swing.JFrame {

    /**
     * Creates new form DissasmbleFrame
     */
    public DissasembleFrame() {
        initComponents();
        this.setTitle("Dissasemble");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jTextField2 = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();

        jLabel1.setText("Jar name:");

        jButton1.setText("...");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jCheckBox1.setSelected(true);
        jCheckBox1.setText("Decompile all jar");

        jLabel2.setText("Class name:");

        jButton2.setText("...");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Save");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jCheckBox1)
                                    .addComponent(jLabel1))
                                .addGap(216, 216, 216))
                            .addComponent(jTextField1)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jButton3)
                            .addComponent(jTextField2))))
                .addContainerGap(37, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton3)
                .addGap(0, 19, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    File Directory = null;
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        JFileChooser j = new JFileChooser();
        j.setFileSelectionMode(JFileChooser.FILES_ONLY);
        
        ExtensionFileFilter eff = new ExtensionFileFilter("java jar",
        new String[]{".jar"});
        j.setFileFilter(eff);
        
        if (Directory!=null)
        j.setCurrentDirectory(Directory);
        
        j.setDialogTitle("Choose target jar class:");
        Integer opt = j.showOpenDialog(this);

        if (opt == JFileChooser.APPROVE_OPTION)
        {
            
            File file = j.getSelectedFile();
            String filePath = file.getAbsolutePath();
            File sdirectory = j.getCurrentDirectory();
            if (sdirectory.exists()&&sdirectory.isDirectory())
            Directory = sdirectory;
            jTextField1.setText(filePath);

        }  
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:

try
 {
           
if (jTextField1.getText().toLowerCase().endsWith(".jar")||
        jTextField1.getText().toLowerCase().endsWith(".zip"))
{
List<String> list = new java.util.ArrayList<>();
        try
        {
        
        ZipFile zf = new ZipFile(jTextField1.getText());
        Enumeration<? extends ZipEntry> entries = zf.entries();
        
        while (entries.hasMoreElements())
        {
        ZipEntry entry = entries.nextElement();
        if (entry == null)
        break;
        
        if (entry.getName().endsWith(".class"))
        list.add(entry.getName());
        
        }
        zf.close();
        }
        catch(Exception exc)
        {
            
        }

ClassSelector selector = new ClassSelector(this,true);
selector.Initialise("Class", list);
selector.SetSelectedName("");
selector.setVisible(true);

if (!selector.GetSelectedName().isEmpty())
jTextField2.setText(selector.GetSelectedName());

}
else
{
        JFileChooser j = new JFileChooser();
        j.setFileSelectionMode(JFileChooser.FILES_ONLY);
        
        ExtensionFileFilter eff = new ExtensionFileFilter("java class",
        new String[]{".class"});
        j.setFileFilter(eff);
        
        if (Directory!=null)
        j.setCurrentDirectory(Directory);
        
        j.setDialogTitle("Choose target java class:");
        Integer opt = j.showOpenDialog(this);

        if (opt == JFileChooser.APPROVE_OPTION)
        {
            
            File file = j.getSelectedFile();
            String filePath = file.getAbsolutePath();
            File sdirectory = j.getCurrentDirectory();
            if (sdirectory.exists()&&sdirectory.isDirectory())
            Directory = sdirectory;
            jTextField2.setText(filePath);

        } 
}
}
catch(Exception exc)
{
   
}


            
    }//GEN-LAST:event_jButton2ActionPerformed

    public void SetJarPath(String jar_path)
    {
    if (jar_path!=null)
    jTextField1.setText(jar_path);
    }
    
    public void SetClassPath(String class_path)
    {
    if (class_path!=null)
    jTextField2.setText(class_path);
    }
    
ClassReaderWriter.Opcode opcode = null;
String fullbody = "";
StringBuilder sb = new StringBuilder();

    public String GetMethodString(ClassReader clsread,int methodindex)
    {
    
     byte[] methodbytes = GetMethodBytes(clsread, methodindex);
        if (methodbytes!=null)
        {

opcode = new ClassReaderWriter.Opcode();
fullbody = opcode.parseCode(methodbytes, clsread);

int size = opcode.sizes.size();
for (int j=0;j<size;j++)
{
sb.append(opcode.opcodes.get(j));
sb.append('\n');
}

        
        }
        
        return "";
    }
    
    public byte[] GetMethodBytes(ClassReader clsread,int methodindex)
    {
        if (clsread!=null)
        {
        if (methodindex<clsread.methods.length&&
        clsread.methods[methodindex]!=null)
        {
        try
        {
     for (int i=0;i<clsread.methods[methodindex].attributes.length;i++)
     {
if (clsread.methods[methodindex].attributes[i] instanceof AttributeCode)
{
AttributeCode atribcode = (AttributeCode)clsread.methods[methodindex].attributes[i];
return atribcode.code;
}
        }
            }
                    catch (Exception exc)
                    {
                    
                    }
        }
    }
       return null;
    }
    
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
sb = new StringBuilder();

if (jTextField1.getText().toLowerCase().endsWith(".jar")||
        jTextField1.getText().toLowerCase().endsWith(".zip"))
{
       
    try
    {
        ZipFile zf = new ZipFile(jTextField1.getText());
        Enumeration<? extends ZipEntry> entries = zf.entries();
        
        while (entries.hasMoreElements())
        {
        ZipEntry entry = entries.nextElement();
        if (entry == null)
        break;
        
        if (entry.getName().endsWith(".class")&&
            (jCheckBox1.isSelected()&&entry.getName().equals(jTextField2.getText())))
        {
ZipEntry zentry = zf.getEntry(entry.getName());
InputStream instream = zf.getInputStream(zentry);
ByteArrayOutputStream bos = new ByteArrayOutputStream();
int next = instream.read();
while (next > -1)
{
    bos.write(next);
    next = instream.read();
}
bos.flush();
byte[] array = bos.toByteArray();

ClassReader clsread = new ClassReader();
boolean isok = clsread.init(array);
if (!isok)
clsread = null;
else
DissasembleClass(clsread, entry.getName());

}
        }
        zf.close();

}
catch(Exception exc)
{

}

}
File file1 = new File(jTextField2.getText());
if (file1.exists())
{

try
{
byte[] bytes = utils.getBytesFromFile(file1);
ClassReader clsread = new ClassReader();
boolean isok = clsread.init(bytes);
if (!isok)
clsread = null;
else
DissasembleClass(clsread, jTextField2.getText());
}
catch(Exception exc)
{

}

}

if (sb!=null&&sb.length()>0)
{
        JFileChooser j = new JFileChooser();
        j.setFileSelectionMode(JFileChooser.FILES_ONLY);
        
        ExtensionFileFilter eff = new ExtensionFileFilter("text file",
        new String[]{".txt"});
        j.setFileFilter(eff);
        
        if (Directory!=null)
        j.setCurrentDirectory(Directory);
        
        j.setDialogTitle("Choose out text file:");
        Integer opt = j.showSaveDialog(this);

        if (opt == JFileChooser.APPROVE_OPTION)
        {
            
            File file = j.getSelectedFile();
            String filePath = file.getAbsolutePath();
            if (!filePath.toLowerCase().endsWith(".txt"))
            filePath += ".txt";
            File sdirectory = j.getCurrentDirectory();
            if (sdirectory.exists()&&sdirectory.isDirectory())
            Directory = sdirectory;
            
            try
            {
            BufferedWriter bwr = new BufferedWriter(new FileWriter(new File(filePath)));
                       
            //write contents of StringBuffer to a file
            bwr.write(sb.toString());
               
            //flush the stream
            bwr.flush();
               
            //close the stream
            bwr.close();
                
            }
            catch(Exception exc)
            {
                
            }

        }  
}


    }//GEN-LAST:event_jButton3ActionPerformed

    public void DissasembleClass(ClassReader clsread, String classname)
    {
sb.append("class ");
sb.append(classname);
sb.append('\n');
sb.append('{');
    
if (clsread.fields_count>0)
{
for (int i = 0; i < clsread.fields_count; i++)
{
sb.append('\n');
sb.append(clsread.fields[i].getDeclaration());
sb.append('\n');
}
}

if (clsread.methods_count>0)
{
for (int i = 0; i < clsread.methods_count; i++)
{
String methoddeclaration = clsread.methods[i].getDeclaration();
sb.append(methoddeclaration);
sb.append('\n');
sb.append('{');
sb.append('\n');
GetMethodString(clsread, i);
sb.append('}');
sb.append('\n');
sb.append('\n');
                    }
                    }

sb.append('\n');  // class end
sb.append('}');
sb.append('\n');

        
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DissasembleFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DissasembleFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DissasembleFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DissasembleFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DissasembleFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
